train[is.na(train$Utilities), c('Utilities', 'Heating', "CentralAir")] %>% View()
train[is.na(train$BsmtFullBath), c("BsmtFullBath", "BsmtHalfBath")] %>% View()
train[is.na(train$BsmtFullBath),] %>% View()
train[is.na(train$BsmtFinType2), c("BsmtQual", "BsmtCond")] %>% View()
train[is.na(train$BsmtFinType2), c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View()
train[is.na(train$BsmtExposure), c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View()
train[is.na(train$GarageType), c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "BsmtFinSF1", "GarageCond", "GarageCars","GarageArea")] %>% View()
train[is.na(train$GarageType), c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", GarageCond", "GarageCars","GarageArea")] %>% View()
train[is.na(train$GarageType), c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")] %>% View()
train[is.na(train$PoolQC), c("PoolQC", "PoolArea")] %>% View()
nrow(train)
train[!is.na(train$PoolQC), c("PoolQC", "PoolArea")] %>% View()
1453/1460
train[!is.na(train$FireplaceQu), c("Fireplaces", "FireplaceQu")] %>% View()
train[is.na(train$FireplaceQu), c("Fireplaces", "FireplaceQu")] %>% View()
train[is.na(train$MiscFeature), c("MiscFeature", "MiscVal")] %>% View()
train$Fireplaces
train$Fence
train$LotFrontage
train[is.na(train$LotFrontage), c("LotFrontage", "LotArea")] %>% View()
train[is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% View()
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% View()
# check what NA stands for and how to impute
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% View() #
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% sort()
?sort()
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% sort(., decreasing = F)
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% sort(.$LotArea, decreasing = F)
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% sort(train$LotArea, decreasing = F)
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")]
test = train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")]
sort(test, decreasing = F)
rlang::last_error()
sort(test$LotArea, decreasing = F)
order(test)
order(test$LotArea)
test[order(LotArea),]
test[order(test$LotArea),]
test[order(LotArea),]
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(LotArea),]
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotArea),]
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotArea),] %>% View()
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotFrontage),] %>% View()
setwd("~/Dropbox/nycdsa/projects/proj3_houseprice/lu")
library(tidyverse);library(VIM);library(mice);library(caret)
?preProcess
```{r impute}
a = 1
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
setwd("~/Dropbox/nycdsa/projects/proj3_houseprice/lu")
# library for data wrangling & plotting
library(tidyverse)
# library for data imputing
library(VIM);library(mice);library(caret);library(Hmisc)
# library for modeling
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
# check what NA stands for and how to impute
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotFrontage),] %>% View() #So LotFrontage NA is due to LotArea 0, impute with 0
# check what NA stands for and how to impute
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotFrontage),] %>% View() #So LotFrontage NA is due to LotArea 0, impute with 0
train[is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotFrontage),] %>% View() #So LotFrontage NA is due to LotArea 0, impute with 0
train[is.na(train$LotFrontage), ]
train[is.na(train$LotFrontage), ] %>% nrow()
train[is.na(train$LotFrontage), ] %>% nrow()
impute(train$LotFrontage, 0)
train[is.na(train$LotFrontage), ] %>% nrow()
test = impute(train$LotFrontage, 0)
test
train$LotFrontage = impute(train$LotFrontage, 0)
train[is.na(train$LotFrontage), ] %>% nrow()
train[is.na(train$Exterior2nd), c("Exterior1st", "Exterior2nd")]
train[is.na(train$Exterior2nd), c("Exterior1st", "Exterior2nd")] %>% View()
train$Exterior2nd
train[is.na(train$Exterior2nd), ] %>% View()
is.na(train$Exterior2nd)
train[is.na(train$Exterior2nd),]
train[,c("Exterior1st", "Exterior2nd")]
train[,c("Exterior1st", "Exterior2nd")] %>% View()
train[train$Exterior2nd == 'NA',]
train[train$Exterior2nd == 'missing',]
train[train$Exterior2nd == 'none',]
train[is.na(train$MasVnrType), c('MasVnrType', 'MasVnrArea')] %>% View()
train[train$MasVnrType == "None", c('MasVnrType', 'MasVnrArea')] %>% View()
train[train$MasVnrType == "None",]
train[train$MasVnrType == "None","MasVnrType"]
train[train$MasVnrType == "None","MasVnrType"] = "Nothing"
train$MasVnrType %>% str_replace_all("None", "Missing")
train$MasVnrType
train$MasVnrType %>% str_replace_all("None", "Missing")
train$MasVnrType
train$MasVnrType
train$MasVnrType = train$MasVnrType %>% str_replace_all("None", "Missing")
train$MasVnrType
train[train$MasVnrType,]
train[train$MasVnrType,] %>% nrow()
train[is.na(train$MasVnrType),] %>% nrow()
train[is.na(train$BsmtFinType2), c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View()
train[is.na(train$BsmtFinType2), c("BsmtFinType2", "BsmtExposure")]
train[is.na(train$BsmtFinType2), c("BsmtFinType2", "BsmtExposure")] %>% View()
train[is.na(train$BsmtExposure), c("BsmtFinType2", "BsmtExposure")] %>% View()
train[(is.na(train$BsmtExposure) | is.na(train$BsmtExposure)), c("BsmtFinType2", "BsmtExposure")] %>% View()
T & F
T | T
T and F
T & F
train[is.na(train$BsmtExposure & train$BsmtFinType2),]
train[is.na(train$BsmtExposure) & is.na(train$BsmtFinType2),]
train[is.na(train$BsmtExposure) & is.na(train$BsmtFinType2),] %>% nrow()
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),] %>% nrow()
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View()
train$BsmtExposure %>% View()
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View()
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View()
colnames(train)
head(train) %>% View()
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View()
train[949, ]
train[949, c("BsmtExposure", "BsmtCond")]
train[949, "BsmtExposure"]
train[949, "BsmtExposure"] = "No"
train[949,]
train[949,"BsmtExposure"]
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View()
impute(train[c("BsmtQual", "BsmtCond"),], "Nothing")
?apply
?sapply
lapply(col_nothing, impute_nothing)
col_nothing = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")
impute_nothing = function(column){
train$column = impute(train$column, "nothing")
}
lapply(col_nothing, impute_nothing)
impute_nothing = function(column){
train[,column] = impute(train[,column], "nothing")
}
lapply(col_nothing, impute_nothing)
apply(col_nothing, impute_nothing)
sapply(col_nothing, impute_nothing)
is.na(train$BsmtExposure) %>% nrow()
train$Id = 949
train[train$Id == 949,] %>% View()
nrow(train)
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
train[train$Id == 949,]
train[train$Id == 949,]
train[train$Id == 949,] %>% View()
train$LotFrontage = impute(train$LotFrontage, 0)
train$MasVnrType = train$MasVnrType %>% str_replace_all("None", "Missing")
train[949, "BsmtExposure"] = "No"
train[949, "BsmtExposure"]
train[,"BsmtExposure"] = impute(train[,"BsmtExposure"], "nothing")
train[is.na(train$BsmtExposure),]
train[is.na(train$BsmtExposure),] %>% nrow()
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View() # id 949, BsmtExposure should be no, because it has all other basement features, NA here should not mean no basement, impute with "No", rest NA rows impute with Nothing; id 333, BsmtFinType2 is null, but has all other basement features, so here NA means no 2nd finish, but can still impute with Nothing
col_nothing = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")
impute_nothing = function(column){
train[,column] = impute(train[,column], "nothing")
}
vapply(col_nothing, impute_nothing)
?apply
?sapply(list, function)
?sapply
sapply(col_nothing, impute_nothing)
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View() # id 949, BsmtExposure should be no, because it has all other basement features, NA here should not mean no basement, impute with "No", rest NA rows impute with Nothing; id 333, BsmtFinType2 is null, but has all other basement features, so here NA means no 2nd finish, but can still impute with Nothing
col_nothing = list("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")
col_nothing
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
train$LotFrontage = impute(train$LotFrontage, 0)
train$MasVnrType = train$MasVnrType %>% str_replace_all("None", "Missing")
train[949, "BsmtExposure"] = "No"
col_nothing = list("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")
impute_nothing = function(column){
train[,column] = impute(train[,column], "nothing")
}
sapply(col_nothing, impute_nothing)
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View() # id 949, BsmtExposure should be no, because it has all other basement features, NA here should not mean no basement, impute with "No", rest NA rows impute with Nothing; id 333, BsmtFinType2 is null, but has all other basement features, so here NA means no 2nd finish, but can still impute with Nothing
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
# impute_nothing = function(column){
#   train[,column] = impute(train[,column], "nothing")
# }
# sapply(col_nothing, impute_nothing)
for (column in col_nothing){
train[,column] = impute(train[,column], "nothing")
}
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View() # id 949, BsmtExposure should be no, because it has all other basement features, NA here should not mean no basement, impute with "No", rest NA rows impute with Nothing; id 333, BsmtFinType2 is null, but has all other basement features, so here NA means no 2nd finish, but can still impute with Nothing
train[!is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View()
train[,c("OverallQual", "Id")]
train[,c("OverallQual", "Id")] %>% View()
type(train$OverallQual)
class(train$OverallQual)
class(train$Functional)
?switch
switch('Gtl', Gtl = 1, Mod = 2, Sev = 3)
switch(train$LandSlope, Gtl = 1, Mod = 2, Sev = 3)
sapply(train$LandSlope, function(x) switch(x, Gtl = 1, Mod = 2, Sev = 3))
test = sapply(train$LandSlope, function(x) switch(x, Gtl = 1, Mod = 2, Sev = 3))
View(test)
train$LandSlopeNum = sapply(train$LandSlope, function(x) switch(x, Gtl = 1, Mod = 2, Sev = 3))
train[, c("LandSlope", "LandSlopeNum")]
train[, c("LandSlope", "LandSlopeNum")] %>% View()
range(3)
range(1,3)
range(1,3, 1)
seq(1,4)
sapply(c("Typ", "Min1"), seq(1,2)  )
Typ, Min1, Min2, Mod, Maj1, Maj2, Sev, Sal = seq(1,8)
a, b = seq(1,2)
(Typ, Min1, Min2, Mod, Maj1, Maj2, Sev, Sal) = seq(1,8)
c(Typ, Min1, Min2, Mod, Maj1, Maj2, Sev, Sal) = seq(1,8)
c(a,b) = 1,2
c(a,b) %=% 1,2
c(a,b) %=% c(1,2)
c(a,b) %<-% c(1,2)
c(a,b) %<-% list(1,2)
install.packages("zeallot")
# library for data wrangling & plotting
library(tidyverse);library(zeallot)
c(a,b) %=% c(1,2)
c(a,b) %<-% c(1,2)
c(Typ, Min1, Min2, Mod, Maj1, Maj2, Sev, Sal) %<-% seq(1,8)
Maj1
Maj1 %>% class()
sapply(train$Functional, function(x) switch(x, c(Typ, Min1, Min2, Mod, Maj1, Maj2, Sev, Sal)))
sapply(train$Functional, function(x) switch(x, Typ, Min1, Min2, Mod, Maj1, Maj2, Sev, Sal))
Typ
Min1
sapply(train$Functional, function(x) switch(x, Typ, Min1, Min2, Mod, Maj1, Maj2, Sev, Sal))
c(Gtl, Mod, Sev) = seq(1,3)
c(Gtl, Mod, Sev) %<-% seq(1,3)
Gtl
Mod
sapply(train$LandSlope, function(x) switch(x, Gtl, Mod, Sev))
sapply(train$LandSlope, function(x) switch(x, Gtl =1, Mod, Sev))
sapply(train$LandSlope, function(x) switch(x, Gtl, Mod, Sev))
sapply(train$LandSlope, function(x) switch(x, c(Gtl, Mod, Sev) %<-% seq(1,3)))
sapply(train$Functional, function(x) switch(x, Typ = 1, Min1 = 2, Min2 = 3, Mod = 4, Maj1 = 5, Maj2 = 6, Sev = 7, Sal = 8))
```{r drop.columns}
train[is.na(train$GarageType), c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")] %>% View()
col_nothing = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF", "GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")
# impute_nothing = function(column){
#   train[,column] = impute(train[,column], "nothing")
# }
# sapply(col_nothing, impute_nothing)
for (column in col_nothing){
train[,column] = impute(train[,column], "nothing")
}
col_nothing = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF", "GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")
for (column in col_nothing){
train[,column] = impute(train[,column], "nothing")
}
garage = c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")
garage = c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")
for (column in garage){
train[,column] = impute(train[,column], "nothing")
}
train[is.na(train$GarageType), c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")] %>% View()
train$GarageType == 'nothing'
train[train$GarageType == 'nothing',]
train[train$GarageType == 'nothing',] %>% View()
train[train$GarageType == 'nothing','GarageType'] %>% View()
train[is.na(train$FireplaceQu), c("Fireplaces", "FireplaceQu")] %>% View()
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View() # id 949, BsmtExposure should be no, because it has all other basement features, NA here should not mean no basement, impute with "No", rest NA rows impute with Nothing; id 333, BsmtFinType2 is null, but has all other basement features, so here NA means no 2nd finish, but can still impute with Nothing
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View() # id 949, BsmtExposure should be no, because it has all other basement features, NA here should not mean no basement, impute with "No", rest NA rows impute with Nothing; id 333, BsmtFinType2 is null, but has all other basement features, so here NA means no 2nd finish, but can still impute with Nothing
train[is.na(train$MasVnrType), c('MasVnrType', 'MasVnrArea')] %>% View() # so MasVnrType NA & MasVnrArea NA are due to no masonry veneer, impute with
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View() # id 949, BsmtExposure should be no, because it has all other basement features, NA here should not mean no basement, impute with "No", rest NA rows impute with Nothing; id 333, BsmtFinType2 is null, but has all other basement features, so here NA means no 2nd finish, but can still impute with Nothing
test = apply(train, 1, char_to_ordinary)
char_to_ordinary = function(x){
x = tolower(ifelse(is.numeric(x),x,trimws(x)))
#ifelse(x=='na',0,ifelse(x %in% c('fa','Unf'),1,ifelse(x %in% c('lwq','fa'), 2,'here')))
}
test = apply(train, 1, char_to_ordinary)
head(test) %>% View()
head(test)
?apply
test = apply(train, 2, char_to_ordinary)
t
char_to_ordinary = function(x){
x = tolower(ifelse(is.numeric(x),x,trimws(x)))
#ifelse(x=='na',0,ifelse(x %in% c('fa','Unf'),1,ifelse(x %in% c('lwq','fa'), 2,'here')))
}
test = apply(train, 2, char_to_ordinary)
head(test)
View(test)
test = apply(train, 2, char_to_ordinary)
View(test)
a = data.frame(rnorm(30), nrow = 5, ncol = 6)
a
a = data.frame(1:30, nrow = 5, ncol = 6)
a
a = matrix(1:30, nrow = 5, ncol = 6)
a
as.data.frame(a)
apply(a, 2, function(x) x + 1)
a = matrix("fire "*30, nrow = 5, ncol = 6)
"fire " * 30
rep("fire ", 30)
a = matrix(rep("fire ", 30), nrow = 5, ncol = 6)
as.data.frame(a)
apply(a, 2, function(x) tolower(x))
a = matrix(rep("FIRE ", 30), nrow = 5, ncol = 6)
as.data.frame(a)
apply(a, 2, function(x) tolower(x))
test = apply(train, 2, function(x) char_to_ordinary(x))
View(test)
test = apply(train, 2, function(x) tolower(x))
View(test)
test = apply(train, 2, function(x) char_to_ordinary(x))
head(test)
train = apply(train, 2, function(x) ifelse(is.numeric(x), x, trimws(x)))
head(train) %>% View()
train = apply(train, 2, function(x) trimws(x))
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
train = apply(train, 2, function(x) tolower(x))
test = apply(train, 2, function(x) trimws(x))
head(test) %>% View()
View(test)
train$LotFrontage = impute(train$LotFrontage, 0)
train = apply(train, 2, function(x) trimws(x))
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
train = apply(train, 2, function(x) tolower(x))
train = apply(train, 2, function(x) trimws(x))
# check what NA stands for and how to impute
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotFrontage),] %>% View()
View(train)
str(train)
train = as.data.frame(train)
str(train)
# check what NA stands for and how to impute
train[!is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotFrontage),] %>% View()
train[is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotFrontage),] %>% View() #So LotFrontage NA is due to LotArea 0, impute with 0
train$LotFrontage = impute(train$LotFrontage, 0)
train[is.na(train$LotFrontage), c("LotFrontage", "LotArea", "Street")] %>% .[order(.$LotFrontage),] %>% View() #So LotFrontage NA is due to LotArea 0, impute with 0
train[is.na(train$LotFrontage), ] %>% nrow()
train[is.na(train$Alley), ] %>% View()
train[is.na(train$Alley), "Alley" ] %>% View()
train$Alley = impute(train$Alley, "nothing")
train[is.na(train$Alley), "Alley" ] %>% View()
train[is.na(train$Exterior2nd), c("Exterior1st", "Exterior2nd")] %>% Vie()
train[is.na(train$Exterior2nd), c("Exterior1st", "Exterior2nd")] %>% View()
train[is.na(train$MasVnrType), c('MasVnrType', 'MasVnrArea')] %>% View() # so MasVnrType NA & MasVnrArea NA are due to no masonry veneer, impute with
mode(train$MasVnrType)
train$MasVnrType = impute(train$MasVnrType, "nothing")
train[is.na(train$MasVnrType), c('MasVnrType', 'MasVnrArea')] %>% View() # so MasVnrType NA & MasVnrArea NA are due to no masonry veneer, impute with
train$MasVnrType = train$MasVnrType %>% str_replace_all("None", "nothing")
train$MasVnrArea = impute(train$MasVnrArea, 0)
train[train$MasVnrArea == 0, c("MasVnrType", "MasVnrArea")]
train[train$MasVnrArea == 0, c("MasVnrType", "MasVnrArea")] %>% View()
train[train$MasVnrType == 'nothing', c("MasVnrType", "MasVnrArea")] %>% View()
train$MasVnrType = train$MasVnrType %>% str_replace_all("None", "nothing")
train[train$MasVnrArea == 0, c("MasVnrType", "MasVnrArea")] %>% View()
train$MasVnrType = train$MasVnrType %>% str_replace_all("none", "nothing")
train[train$MasVnrArea == 0, c("MasVnrType", "MasVnrArea")] %>% View()
train[is.na(train$Electrical), c("Electrical", "Utilities", "CentralAir", "HeatingQC", "Heating")] %>% View()
train[!is.na(train$Electrical), c("Electrical", "Utilities", "CentralAir", "HeatingQC", "Heating")] %>% View()
getmode(train$Electrical)
train$Electrical = impute(train$Electrical, "sbrkr")
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View() # id 949, BsmtExposure should be no, because it has all other basement features, NA here should not mean no basement, impute with "No", rest NA rows impute with Nothing; id 333, BsmtFinType2 is null, but has all other basement features, so here NA means no 2nd finish, but can still impute with Nothing
train[949, "BsmtExposure"] = "No"
col_nothing = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")
for (column in col_nothing){
train[,column] = impute(train[,column], "nothing")
}
train[is.na(train$BsmtExposure) | is.na(train$BsmtFinType2),c("Id", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2", "BsmtFinSF2","BsmtUnfSF","TotalBsmtSF")] %>% View() # id 949, BsmtExposure should be no, because it has all other basement features, NA here should not mean no basement, impute with "No", rest NA rows impute with Nothing; id 333, BsmtFinType2 is null, but has all other basement features, so here NA means no 2nd finish, but can still impute with Nothing
train[is.na(train$GarageType), c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")] %>% View()
garage = c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")
for (column in garage){
train[,column] = impute(train[,column], "nothing")
}
train[is.na(train$GarageType), c("GarageType", "GarageYrBlt", "GarageFinish", "GarageQual", "GarageCond", "GarageCars","GarageArea")] %>% View()
train[is.na(train$FireplaceQu), c("FireplaceQu", "Fireplaces")] %>% View()
train$FireplaceQu = impute(train$FireplaceQu, 'nothing')
train[is.na(train$FireplaceQu), c("FireplaceQu", "Fireplaces")] %>% View()
train[is.na(train$Fence), "Fence"] %>% View()
train$Fence = impute(train$Fence, 'nothing')
train[is.na(train$Fence), "Fence"] %>% View()
train[is.na(train$MiscFeature), c("MiscFeature", "MiscVal")] %>% View()
train$MiscFeature = impute(train$MiscFeature, 'nothing')
train[is.na(train$MiscFeature), c("MiscFeature", "MiscVal")] %>% View()
train[is.na(train$PoolQC), c("PoolArea", "PoolQC")] %>% View()
train$PoolQC = impute(train$PoolQC, 'nothing')
train[is.na(train$PoolQC), c("PoolArea", "PoolQC")] %>% View()
#sort(colSums(sapply(train[missing], is.na)), decreasing=TRUE)
```
missing <- which(colSums(is.na(train)) > 0)
missing
sort(colSums(sapply(train[missing], is.na)), decreasing=TRUE)
missing
nones = which(colSums(train == "none"))
str_detect(train, "none")
str_detect(train, "none") %>% sum()
str_detect(train, "na") %>% sum()
getwd()
write.csv(file = "./processed_data/train_full.csv", train)
nrow(train)
Mode(train$Electrical)
install.packages("DescTools")
train$Electrical %>% unique()
?tabulate
?match
choice = unique(train$Electrical)
choice
class(choice)
match(train, choice)
match(train$Electrical, choice)
max(match(train$Electrical, choice))
tabulate(match(train$Electrical, choice))
max(tabulate(match(train$Electrical, choice)))
choice[which.max(tabulate(match(train$Electrical, choice)))]
cwhich.max(tabulate(match(train$Electrical, choice)))
which.max(tabulate(match(train$Electrical, choice)))
which(max(tabulate(match(train$Electrical, choice))))
?which
get_mode = function(x){
lv = unique(x)
lv[which.max(tabulate(match(x, lv)))]
}
get_mode(train$Electrical)
return(ans)
get_mode(train$Electrical)
ans = lv[which.max(tabulate(match(x, lv)))] %>% as.character()
lv[which.max(tabulate(match(x, lv)))]
get_mode = function(x){
lv = unique(x)
lv[which.max(tabulate(match(x, lv)))]
}
get_mode = function(x){
lv = unique(x)
ans = lv[which.max(tabulate(match(x, lv)))] %>% as.character()
}
get_mode(train$Electrical)
get_mode = function(x){
lv = unique(x)
ans = lv[which.max(tabulate(match(x, lv)))] %>% as.character()
return(ans)
}
get_mode(train$Electrical)
get_mode(train$Electrical) %>% class()
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
train[!is.na(train$Electrical), c("Electrical", "Utilities", "CentralAir", "HeatingQC", "Heating")] %>% View()
train[is.na(train$Electrical), c("Electrical", "Utilities", "CentralAir", "HeatingQC", "Heating")] %>% View()
train[is.na(train$Electrical), c("Id", "Electrical", "Utilities", "CentralAir", "HeatingQC", "Heating")] %>% View()
train$LotFrontage = impute(train$LotFrontage, 0)
train$Alley = impute(train$Alley, "nothing")
train$MasVnrType = impute(train$MasVnrType, "nothing")
train$MasVnrType = train$MasVnrType %>% str_replace_all("none", "nothing")
train$MasVnrArea = impute(train$MasVnrArea, 0)
get_mode = function(x){
lv = unique(x)
ans = lv[which.max(tabulate(match(x, lv)))] %>% as.character()
return(ans)
}
get_mode(train$Electrical)
#train$Electrical = impute(train$Electrical, "sbrkr")
train$Electrical = impute(train$Electrical, "sbrkr")
#train$Electrical = impute(train$Electrical, "sbrkr")
train$Electrical = impute(train$Electrical, get_mode(train$Electrical))
train[1380, "Electrical"]
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
train$LotFrontage = impute(train$LotFrontage, 0)
train$Alley = impute(train$Alley, "nothing")
train$MasVnrType = impute(train$MasVnrType, "nothing")
train$MasVnrType = train$MasVnrType %>% str_replace_all("none", "nothing")
train$MasVnrArea = impute(train$MasVnrArea, 0)
get_mode = function(x){
lv = unique(x)
ans = lv[which.max(tabulate(match(x, lv)))] %>% as.character()
return(ans)
}
#train$Electrical = impute(train$Electrical, "sbrkr")
train$Electrical = impute(train$Electrical, get_mode(train$Electrical))
train[1380,"Electrical"]
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
train = apply(train, 2, function(x) tolower(x))
train = apply(train, 2, function(x) trimws(x))
train = as.data.frame(train)
train$LotFrontage = impute(train$LotFrontage, 0)
train$Alley = impute(train$Alley, "nothing")
train$MasVnrType = impute(train$MasVnrType, "nothing")
train$MasVnrType = train$MasVnrType %>% str_replace_all("none", "nothing")
train$MasVnrArea = impute(train$MasVnrArea, 0)
get_mode = function(x){
lv = unique(x)
ans = lv[which.max(tabulate(match(x, lv)))] %>% as.character()
return(ans)
}
#train$Electrical = impute(train$Electrical, "sbrkr")
train$Electrical = impute(train$Electrical, get_mode(train$Electrical))
train[1380, "Electrical"]
get_mode(train$Electrical)
train[c(1380, 1381, 1382), "Electrical"]
get_mode(train$Electrical)
get_mode(train$Electrical)[1]
get_mode(train$Electrical)[[1]]
train[1381, "Electrical"] %>% class()
get_mode = function(x){
lv = unique(x)
lv[which.max(tabulate(match(x, lv)))]
}
train = read_csv("./raw_data/train.csv")
test = read_csv("./raw_data/test.csv")
